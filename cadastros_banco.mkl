@label("Cadastros") //xx
domain cadastros

@webAnalitycs(tagId: "UA-157001792-1" onlyInProduction: true)
@label("Banco")
service banco {
	
	config {
		groupId: "br.com.kerubin.api"
		version: "1.0.0"
		cloudConfigUri: "http://localhost:9091"
		servicePort: 0
		
		messagingCore {version:"1.0.0"}
		databaseCore {version:"1.0.0"}
	}
	
	dependency {
		groupId: "br.com.kerubin.api"
		artifactId: "financeiro-planocontas-client"
		version: "1.0.0" 
	}
	
	@publishEvents// (events=[created, updated, deleted]) 
	@auditing
	@label(title: "Banco")
	entity Banco {
		
		numero: string[20] 
		label: "Código"
		autoComplete
		publishedInEvents
		web(styleClass: "ui-md-4")
		help(text: "Informe o código do banco. Por exemplo, o Banco do Brasil é código: 001.")
		
		nome: string
		label: "Nome"
		autoComplete
		publishedInEvents
		listFilter(many: "Nome do(s) banco(s)")
		web(styleClass: "ui-md-8")
		help(text: "Informe o nome do banco. Por exemplo, Banco do Brasil S.A.")
		unaccent
		
		rules {
			with(numero).apply(trimLeft("0"))
		}
	}
	
	@publishEvents
	@auditing
	@label(title: "Agência bancária")
	entity AgenciaBancaria {
		
		banco: refers Banco manyToOne
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Escolha o banco da agência bancária.")
		
		numeroAgencia: string[50] 
		autoComplete
		label: "Agência"
		publishedInEvents
		web(styleClass: "ui-md-5")
		help(text: "Informe a agência (sem o dígito). Por exemplo: 9999")
		
		digitoAgencia: string[10] 
		autoComplete(result)
		label: "Dígito"
		publishedInEvents
		web(styleClass: "ui-md-1")
		help(text: "Informe o dígito da agência. Por exemplo: 9")
		
		//////////////////////////
		separator
		maisOpcoes: boolean? transient
		label: "Mostrar mais opções"
		help(text: "Mostra ou oculta opções extras para a conta")
		web(styleClass: "ui-md-12")
		grid(hidden)
		
		endereco: string? 
		autoComplete
		label: "Endereço/localização da agência"
		web(styleClass: "ui-md-6")
		help(text: "Informe o endereço ou localização da agência. Exemplo: Agência do centro.")
		unaccent
		
		nomeGerente: string?
		label: "Nome do gerente"
		web(styleClass: "ui-md-4")
		help(text: "Caso saiba, informe o nome do gerente da agência.")
		
		fone: string[50]?
		label: "Telefone da agência"
		web(styleClass: "ui-md-2")
		help(text: "Caso saiba, informe o telefone da agência.")
		
		rules {
			with(endereco).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(nomeGerente).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(fone).apply(hiddeComponent).when(maisOpcoes.isFalse)
			
			with(numeroAgencia).apply(trimLeft("0"))
		}
		
	}
	
	@auditing
	@publishEvents
	@label(title: "Bandeira de cartão")
	entity BandeiraCartao {
		
		nomeBandeira: string
		label: "Bandeira do cartão"
		autoComplete
		publishedInEvents
		listFilter(many: "Bandeira(s)")
		web(styleClass: "ui-md-12")
		help(text: "Informe a bandeira do cartão. Por exemplo: Mastercad.")
		unaccent
	}
	
	@auditing
	@publishEvents
	@label(title: "Conta bancária")
	entity ContaBancaria {
		//--
		nomeTitular: string
		label: "Nome do títular da conta"
		publishedInEvents
		autoComplete
		web(styleClass: "ui-md-6")
		help(text: "Informe o nome do títular da conta bancária.")
		unaccent
		
		////
		cpfCnpjTitular: string[20]?
		label: "CPF/CNPJ do títular da conta"
		validation(name: CpfOrCnpj 	message: "CPF/CNPJ inválido.")
		publishedInEvents
		autoComplete
		web(styleClass: "ui-md-4")
		help(text: "Caso queira, informe o CPF/CNPJ do títular da conta bancária.")
		grid(hidden)
		
		tipoContaBancaria: TipoContaBancaria
		label: "Tipo da conta"
		publishedInEvents
		web(styleClass: "ui-md-2")
		help(text: "Selecione o tipo da conta bancária.")
		
		////////////
		separator
		agencia: refers AgenciaBancaria manyToOne
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Selecione a agência bancária desta conta.")
		
		numeroConta: string[30] 
		autoComplete(result)
		label: "Número da conta"
		publishedInEvents
		listFilter(many: "Número da(s) conta(s)")
		web(styleClass: "ui-md-2")
		help(text: "Informe o número da conta bancária (sem o dígito).")
		
		digito: string[10]? 
		autoComplete(result)
		label: "Dígito"
		publishedInEvents
		web(styleClass: "ui-md-1")
		help(text: "Caso queira, informe o dígito verificador da conta bancária.")
		
		saldo: money?
		label: "Saldo"
		web(styleClass: "ui-md-3")
		help(text: "Caso queira, informe o saldo da conta bancária.")
		grid(hidden)
		//--
		
		/////////////////////////////
		separator
		maisOpcoes: boolean? transient
		label: "Mostrar mais opções"
		help(text: "Mostra ou oculta opções extras para a conta")
		web(styleClass: "ui-md-12")
		grid(hidden)
		
		//////
		separator
		ativo: boolean
		label: "Conta ativa"
		publishedInEvents
		web(styleClass: "ui-md-2")
		help(text: "Marca a conta bancária como Ativa ou Inativa. Apenas contas Ativas podem ser usadas para recebimentos e/ou pagamentos nos cadastros das contas.")
		
		dataValidade: date?
		mask:"MM/yyyy"
		publishedInEvents
		label: "Validade do cartão"
		web(styleClass: "ui-md-2")
		help(text: "Caso queira, informe a data de validade do cartão desta conta.")
		
		numeroCartao: string[50]?
		label: "Número do cartão"
		web(styleClass: "ui-md-6")
		help(text: "Caso queira, informe o número do cartão da conta bancária.")
		grid(hidden)
		
		codigoSeguranca: string[10]?
		label: "Código de segurança"
		web(styleClass: "ui-md-2")
		help(text: "Caso queira, informe o código de segurança do cartão.")
		grid(hidden)
		////
		
		bandeiraCartao: refers BandeiraCartao? manyToOne
		label: "Bandeira do cartão"
		publishedInEvents
		web(styleClass: "ui-md-12")
		help(text: "Caso queira, informe a bandeira do cartão da conta bancária. Por exemplo: Mastercard.")
		grid(hidden)
		
		rules {
			
			with(ativo).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(dataValidade).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(numeroCartao).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(codigoSeguranca).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(bandeiraCartao).apply(hiddeComponent).when(maisOpcoes.isFalse)
			
			with(numeroConta).apply(trimLeft("0"))
		}
		
	}
	
	@publishEvents
	@auditing
	@label(title: "Cartão de crédito")
	entity CartaoCredito {
		
		//--
		nomeTitular: string
		autoComplete
		label: "Nome do títular do cartão"
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Informe o nome do títular do cartão.")
		unaccent
		
		banco: refers Banco manyToOne
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Informe o banco que provê este cartão. Exemplo: Nu bank.")
		
		//--
		numeroCartao: string[50] 
		autoComplete
		label: "Número do cartão"
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Informe o número do cartão.")
		
		validade: date?
		label: "Validade"
		mask:"mm/yy"
		publishedInEvents
		web(styleClass: "ui-md-2")
		help(text: "Caso queira, informe a data de validade do cartão.")
		grid(hidden)
		
		codigoSeguranca: string[10]?
		label: "Código de segurança"
		web(styleClass: "ui-md-2")
		help(text: "Caso queira, informe o código de segurança do cartão.")
		grid(hidden)
		
		valorLimite: money?
		label: "Limite de crédito"
		publishedInEvents
		web(styleClass: "ui-md-2")
		help(text: "Caso queira, informe o limite do cartão.")
		grid(hidden)
		
		//////////////////////////
		separator
		maisOpcoes: boolean? transient
		label: "Mostrar mais opções"
		web(styleClass: "ui-md-12")
		grid(hidden)
		help(text: "Mostra ou oculta opções extras para o cartão.")
		
		//--
		bandeiraCartao: refers BandeiraCartao? manyToOne
		label: "Bandeira do cartão"
		publishedInEvents
		web(styleClass: "ui-md-6")
		help(text: "Caso queira, informe a bandeira do cartão.")
		
		ativo: boolean
		label: "Cartão ativo"
		publishedInEvents
		web(styleClass: "ui-md-2")
		help(text: "Marca o cartão como Ativo ou Inativo. Apenas cartões Ativos podem ser usados nos cadastros das contas.")
		
		rules {
			
			with(bandeiraCartao).apply(hiddeComponent).when(maisOpcoes.isFalse)
			with(ativo).apply(hiddeComponent).when(maisOpcoes.isFalse)
			
			with(bandeiraCartao).apply()
		}
		
	}
	
	@label(title: "Conciliação bancária")
	@auditing
	entity ConciliacaoBancaria {
		
		id: uuid
		
		bancoId: string
		label: "Banco"
		web(styleClass: "ui-md-3" readOnly)
		
		agenciaId: string
		label: "Agência"
		web(styleClass: "ui-md-1" readOnly)
		
		contaId: string
		label: "Conta"
		web(styleClass: "ui-md-2"  readOnly)
		
		dataIni: date
		label: "Data inicial"
		web(styleClass: "ui-md-2" readOnly)
		
		dataFim: date
		label: "Data final"
		web(styleClass: "ui-md-2" readOnly)
		
		//transacoes: contains ConciliacaoTransacao optional many oneToMany
		
		situacaoConciliacao: SituacaoConciliacao
		web(styleClass: "ui-md-2" readOnly)
		
		rules {
			
			with(bancoId).apply(trimLeft("0"))
			with(agenciaId).apply(trimLeft("0"))
			with(contaId).apply(trimLeft("0"))
			
			with(form).apply(polling(callback: recarregarConciliacao))
			
			//with(form).apply(disableCUD).when(id.isNotNull)
			
			with(form.actions)
				.apply(function(name: aplicarConciliacaoBancaria params:[this] return: this))
				.when(id.isNotNull and situacaoConciliacao.isEquals(SituacaoConciliacao.TRANSACOES_ANALISADAS))
				.action(name: aplicarConciliacao button(tooltip: "Aplicar conciliação" label: "Aplicar conciliação" cssClass: "ui-button-success" icon: "pi pi-play"))
			
		}
	}
	//
	
	@label(title: "Transações")
	//@labelMenu(")////
	@auditing
	entity ConciliacaoTransacao {
		
		id: uuid?
		findBy(resultType:List enableController
			methodName: findByIdIn 
			params:[
				param(name:ids type:"List<java.util.UUID>")
			]
		)
		
		// Financial Institution Transaction ID <FITID> ///
		trnId: string
		label: "Identificador da transação"
		grid(hidden)
		
		/////
		trnData: date
		label: "Data"
		listFilter(between: "Movimento de;Até;Intervalo de tempo" default: "Personalizado")
		////  
		
		////
		trnHistorico: string
		label: "Histórico"
		listFilter(many: "Histórico" styleClass: "ui-md-6")
		// grid(showDataWithIcon)
		
		trnDocumento: string
		label: "Documento"
		listFilter(many: "Documento" styleClass: "ui-md-6")
		/////
		
		/////
		trnTipo: TipoTransacao
		web(styleClass: "ui-md-3")
		listFilter(isEqualTo: "Crédito/Débito" styleClass: "ui-md-3")
		
		trnValor: money
		label: "Valor"
		web(styleClass: "ui-md-9")
		listFilter(between: "Valores de;até;")
		////
		
		conciliacaoBancaria: /*container*/refers ConciliacaoBancaria manyToOne /*findBy(paged)*/
		listFilter(isEqualTo: "Conciliação bancária" styleClass: "ui-md-4" hidden)
		findBy(enableController)
		grid(hidden)
		
		situacaoConciliacaoTrn: SituacaoConciliacaoTrn
		listFilter(isEqualTo: "Situação" styleClass: "ui-md-9")
		
		////
		tituloConciliadoId: uuid?
		label: "Id. tít. conc."
		grid(showDataWithIcon)
		index
		findBy(resultType:List 
			methodName: findByIdIsNotAndTituloConciliadoIdIs 
			 params:[
			 	param(name: id type: "java.util.UUID"), 
			 	param(name: tituloConciliadoId type: "java.util.UUID")
			 ]
		)
		
		tituloConciliadoDesc: string?
		label: "Desc. tít. conc."
		
		tituloConciliadoValor: money?
		label: "Val. tít."
		
		tituloConciliadoDataVen: date?
		label: "Ven. tít."
		grid(showDataWithIcon(icon: "pi-calendar"))
		
		tituloConciliadoDataPag: date?
		label: "Pag. tít."
		grid(showDataWithIcon(icon: "pi-calendar"))
		
		tituloPlanoContas: refers PlanoConta? manyToOne(/*fetch: eager*/)
		autoCompleteWithOwnerParams
		
		tituloConciliadoMultiple: boolean default: false optional
		label: "Múltiplos"
		help (text:"Recebe pagamentos/recebimentos múltiplos.")
		
		dataConciliacao: date?
		label: "Data da conciliação"
		
		conciliacaoTransacaoTitulos: contains ConciliacaoTransacaoTitulo?* oneToMany(opposite: conciliacaoTransacao fetch: eager) // avoid PersistenceBag errors
		/////
		
		conciliadoComErro: boolean?
		label: "Erro"
		listFilter(isNotNull: "Com erro" styleClass: "ui-md-3")
		grid(hidden)
		
		conciliadoMsg: string?
		label: "Mensagem"
		grid(showDataWithIcon)
		
		rules {
			
			with(formList).apply(polling(callback: recarregarTransacoes))
			
		}
	}
	
	@label(title: "Títulos da transação de conciliação")
	entity ConciliacaoTransacaoTitulo {
		conciliacaoTransacao: refers ConciliacaoTransacao manyToOne
		
		tituloConciliadoId: uuid
		label: "Id. título"
		
		tituloConciliadoDesc: string
		label: "Descrição título"
		
		tituloConciliadoValor: money?
		label: "Val. tít."
		
		tituloConciliadoDataVen: date
		label: "Data vencimento"
		
		tituloConciliadoDataPag: date?
		label: "Data pagamento"
		
		tituloPlanoContas: refers PlanoConta? manyToOne(/*fetch: eager*/)
		
		tituloConciliadoMultiple: boolean default: false optional
		label: "Múltiplos"
		help (text:"Recebe pagamentos/recebimentos múltiplos.")
		
		dataConciliacao: date?
		label: "Data da conciliação"
		
		situacaoConciliacaoTrn: SituacaoConciliacaoTrn
		listFilter(isEqualTo: "Situação" styleClass: "ui-md-9")
	}
	
	@externalEntity
	@subscribe(domain= financeiro, service=plano_contas, events=[cud])
	@label(title: "Plano de contas")
	entity PlanoConta {
		
		codigo: string
		label: "Código"
		autoComplete(data sort(order:asc))
		
		descricao: string
		label: "Descrição"
		autoComplete
		unaccent
		
		tipoFinanceiro: TipoPlanoContaFinanceiro
		
		tipoReceitaDespesa: TipoReceitaDespesa?
		label: "Tipo receita/despesa"
		
		planoContaPai: refers PlanoConta? manyToOne
		label: "Plano de conta pai"
		
		ativo: boolean default: true // Will be replecated
		label: "Ativo"
		
	}
	
	// From Plano de Contas ///
	@label("Tipo da receita/despesa")
	enum TipoReceitaDespesa {
		VARIAVEL
		label: "Variável"
		default
		
		FIXO
		label: "Fixa"
	}
	
	@label("Tipo financeiro do plano de contas")
	enum TipoPlanoContaFinanceiro {
		RECEITA
		label: "Receita"
		
		DESPESA
		label: "Despesa"
	}
	
	@label("Situação da transação de conciliação")
	enum SituacaoConciliacaoTrn {
		NAO_CONCILIADO
		label: "Não conciliado"
		default
		
		CONCILIAR_CONTAS_PAGAR
		label: "Conciliar ao contas a pagar"
		
		CONCILIADO_CONTAS_PAGAR
		label: "Conciliado no contas a pagar"	
			
		CONTAS_PAGAR_BAIXADO_SEM_CONCILIACAO
		label: "Baixado no contas a pagar sem conciliação"		
		
		CONCILIAR_CONTAS_RECEBER
		label: "Conciliar ao contas a receber"
		
		CONCILIADO_CONTAS_RECEBER
		label: "Conciliado no contas a receber"
		
		CONTAS_RECEBER_BAIXADO_SEM_CONCILIACAO
		label: "Baixado no contas a receber sem conciliação"
		
		CONCILIAR_CAIXA
		label: "Conciliar ao caixa"
		
		CONCILIADO_CAIXA
		label: "Conciliado no caixa"
		
		CAIXA_BAIXADO_SEM_CONCILIACAO
		label: "Baixado no caixa sem conciliação"
		
		ERRO
		label: "Erro na conciliação"
		
		CANCELADO
		label: "Conciliação cancelada"
	}
	
	@label("Situação da conciliação")
	enum SituacaoConciliacao {
		NAO_CONCILIADO
		label: "Não conciliado"
		default
		
		ANALISANDO_TRANSACOES
		label: "Analisando transações"
		
		TRANSACOES_ANALISADAS
		label: "Transações analisadas"
		
		CONCILIANDO_TRANSACOES
		label: "Conciliando transações"
		
		CONCILIADO
		label: "Conciliado"
		
		CONCILIADO_COM_ERRO
		label: "Conciliado com erro"
		
		CANCELADO
		label: "Cancelado"
	}
	
	@label("Tipo da transação") //
	enum TipoTransacao {
		CREDITO
		label: "Crédito"
		default
		
		DEBITO
		label: "Débito"
		
		OUTROS
		label: "Outros"
	}
	
	@label("Tipo da conta bancária")
	enum TipoContaBancaria { 
		CONTA_CORRENTE
		label: "Conta corrente"
		default
		
		CONTA_POUPANCA
		label: "Conta poupança"
		
		CONTA_SALARIO
		label: "Conta salário"
		
		CONTA_INVESTIMENTO
		label: "Conta investimento"
	}
	
}